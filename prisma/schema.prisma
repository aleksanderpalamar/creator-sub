// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Tornando a senha opcional
  accounts      Account[]
  sessions      Session[]

  // Campos específicos para criadores
  isCreator  Boolean @default(false)
  pixKey     String?
  pixKeyType String? // cpf, email, telefone, chave aleatória

  // Relacionamentos
  subscriptionPlans    SubscriptionPlan[]
  subscriptions        Subscription[]     @relation("Subscriber")
  creatorSubscriptions Subscription[]     @relation("Creator")
  overlayConfig        OverlayConfig?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  creatorId   String
  name        String
  description String?
  price       Float
  benefits    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator       User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
}

model Subscription {
  id                 String    @id @default(cuid())
  subscriberId       String
  creatorId          String
  subscriptionPlanId String
  status             String // active, cancelled, pending
  startDate          DateTime  @default(now())
  endDate            DateTime?
  lastPaymentDate    DateTime?
  nextPaymentDate    DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  subscriber       User             @relation("Subscriber", fields: [subscriberId], references: [id])
  creator          User             @relation("Creator", fields: [creatorId], references: [id])
  subscriptionPlan SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  payments         Payment[]
}

model Payment {
  id              String    @id @default(cuid())
  subscriptionId  String
  amount          Float
  status          String // pending, completed, failed
  paymentMethod   String // pix
  pixCode         String? // Código Pix copia e cola
  pixQrCodeBase64 String? // Código Pix em base64
  pixExpiration   DateTime? // Data de expiração do Código Pix
  externalId      String? // ID da transação no provedor de pagamento
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
}

model OverlayConfig {
  id        String   @id @default(cuid())
  creatorId String   @unique
  config    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}
